from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse
import fitz 
import os
import shutil
import uuid
import asyncio
import cloudinary
from dotenv import load_dotenv
import os

load_dotenv()

cloudinary.config(
  cloud_name='',
  api_key=os.getenv("CLOUDINARY_API_KEY"),
  api_secret=os.getenv("CLOUDINARY_API_SECRET"),
)

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

TEMP_FOLDER = "temp"
OUTPUT_FOLDER = "output_images"
os.makedirs(TEMP_FOLDER, exist_ok=True)
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

@app.post("/extract-images/")
async def extract_images(file: UploadFile = File(...)):
    if not file.filename or not file.filename.lower().endswith('.pdf'):
        raise HTTPException(status_code=400, detail="Invalid file type. Please upload a PDF.")

    unique_filename = f"{uuid.uuid4()}_{file.filename}"
    pdf_path = os.path.join(TEMP_FOLDER, unique_filename)

    try:
        with open(pdf_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)

        with fitz.open(pdf_path) as doc:
            extracted_files = []

            for page_number in range(len(doc)):
                for img_index, img in enumerate(doc[page_number].get_images(full=True)):
                    xref = img[0]
                    base_image = doc.extract_image(xref)
                    image_bytes = base_image["image"]
                    image_ext = base_image["ext"]
                    
                    image_filename = f"page_{page_number + 1}_img_{img_index + 1}_{uuid.uuid4()}.{image_ext}"
                    full_image_path = os.path.join(OUTPUT_FOLDER, image_filename)

                    with open(full_image_path, "wb") as img_file:
                        img_file.write(image_bytes)

                    extracted_files.append(image_filename)

        return {"message": "Images extracted successfully!", "files": extracted_files}

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error processing PDF: {str(e)}")
    finally:
        try:
            await asyncio.sleep(0.1)
            if os.path.exists(pdf_path):
                os.unlink(pdf_path)
        except PermissionError:
            print(f"Could not delete temporary file: {pdf_path}")
        except Exception as e:
            print(f"Error deleting temporary file: {e}")

@app.get("/extract-images/{filename}")
async def get_image(filename: str):
    file_path = os.path.join(OUTPUT_FOLDER, filename)
    upload_result = cloudinary.uploader.upload(filename)
    if os.path.exists(file_path):
        return FileResponse(file_path)
    raise HTTPException(status_code=404, detail="Image not found")

@app.on_event("startup")
async def startup_event():
    os.makedirs(TEMP_FOLDER, exist_ok=True)
    os.makedirs(OUTPUT_FOLDER, exist_ok=True)