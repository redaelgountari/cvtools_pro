reduce everithing related to filtring i need just to the text that is in the pdf file
import React, { useState } from 'react';
import pdfToText from 'react-pdftotext';

function ReadTXT() {
    const [cvData, setCvData] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState(null);

    // Comprehensive configuration for multilingual parsing
    const SECTION_KEYWORDS = {
      en: {
          personal: ['about', 'profile', 'summary', 'personal details', 'biography'],
          contact: ['contact', 'phone', 'email', 'address', 'linkedin', 'github', 'website'],
          education: ['education', 'academic', 'learning', 'degree', 'diploma', 'courses', 'training'],
          experience: ['experience', 'work', 'career', 'employment', 'job history', 'internship'],
          skills: ['skills', 'expertise', 'competencies', 'technical skills', 'soft skills', 'abilities'],
          projects: ['projects', 'portfolio', 'freelance', 'open source'],
          certifications: ['certifications', 'achievements', 'diplomas', 'licenses', 'qualifications'],
          languages: ['languages', 'spoken languages', 'fluency', 'native language'],
          references: ['references', 'recommendations', 'testimonials'],
          hobbies: ['hobbies', 'interests', 'extra-curricular activities']
      },
      fr: {
          personal: ['à propos', 'profil', 'sommaire', 'détails personnels', 'biographie'],
          contact: ['contact', 'téléphone', 'email', 'adresse', 'linkedin', 'github', 'site web'],
          education: ['éducation', 'formation', 'académique', 'diplôme', 'cours', 'apprentissage'],
          experience: ['expérience', 'expériences', 'travail', 'emploi', 'historique professionnel', 'stage'],
          skills: ['compétences', 'expertises', 'savoir-faire', 'compétences techniques', 'compétences personnelles'],
          projects: ['projets', 'réalisations', 'freelance', 'open source'],
          certifications: ['certifications', 'récompenses', 'diplômes', 'licences', 'qualifications'],
          languages: ['langues', 'langues parlées', 'niveau linguistique', 'langue maternelle'],
          references: ['références', 'recommandations', 'témoignages'],
          hobbies: ['loisirs', 'intérêts', 'activités extra-scolaires']
      },
      ar: {
          personal: ['نبذة', 'ملف', 'ملخص', 'تفاصيل شخصية', 'سيرة ذاتية'],
          contact: ['اتصال', 'هاتف', 'بريد إلكتروني', 'عنوان', 'لينكدإن', 'جيت هاب', 'موقع إلكتروني'],
          education: ['تعليم', 'دراسة', 'أكاديمي', 'شهادة', 'دبلوم', 'دورات', 'تدريب'],
          experience: ['خبرة', 'عمل', 'مهنة', 'وظيفة', 'تاريخ وظيفي', 'تدريب عملي'],
          skills: ['مهارات', 'خبرات', 'كفاءات', 'مهارات تقنية', 'قدرات'],
          projects: ['مشاريع', 'معرض أعمال', 'عمل حر', 'المصدر المفتوح'],
          certifications: ['شهادات', 'إنجازات', 'دبلومات', 'تراخيص', 'مؤهلات'],
          languages: ['اللغات', 'اللغات المحكية', 'اللغة الأم', 'الطلاقة اللغوية'],
          references: ['المراجع', 'التوصيات', 'الشهادات التقديرية'],
          hobbies: ['الهوايات', 'الاهتمامات', 'الأنشطة اللاصفية']
      }
  };
  

    // Advanced name extraction strategies
    const NAME_EXTRACTION_STRATEGIES = [
        // Strategy for full names in various formats
        text => {
            const namePatterns = [
                // Title case full name
                /^([A-ZÀÂÇÉÈÊËÎÏÔÛÙÜŸÑÆŒ][a-zàâçéèêëîïôûùüÿñæœ]+\s+[A-ZÀÂÇÉÈÊËÎÏÔÛÙÜŸÑÆŒ][a-zàâçéèêëîïôûùüÿñæœ]+)/,
                // Uppercase full name
                /^([A-ZÀÂÇÉÈÊËÎÏÔÛÙÜŸÑÆŒ]+\s+[A-ZÀÂÇÉÈÊËÎÏÔÛÙÜŸÑÆŒ]+)/,
                // Name near contact information
                /([A-ZÀÂÇÉÈÊËÎÏÔÛÙÜŸÑÆŒ][a-zàâçéèêëîïôûùüÿñæœ]+\s+[A-ZÀÂÇÉÈÊËÎÏÔÛÙÜŸÑÆŒ][a-zàâçéèêëîïôûùüÿñæœ]+)(?=.*@|\+)/s
            ];

            for (const pattern of namePatterns) {
                const match = text.match(pattern);
                if (match) return match[1].trim();
            }
            return null;
        }
    ];

    // Contact information extraction
    const CONTACT_REGEX = {
        email: /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g,
        phone: /(\+?[0-9]{1,4}[-\s]?)?(\([0-9]{1,4}\)|[0-9]{1,4})[-\s]?[0-9]{3,4}[-\s]?[0-9]{3,4}\b/g,
        linkedin: /(linkedin\.com\/in\/|linkedin\.com\/company\/)\S+/gi,
        github: /github\.com\/\S+/gi
    };

    const extractName = (text) => {
        for (const strategy of NAME_EXTRACTION_STRATEGIES) {
            const name = strategy(text);
            if (name) return name;
        }
        return "Name Not Found";
    };

    const extractContactInfo = (text) => {
        const contacts = {};
        
        Object.entries(CONTACT_REGEX).forEach(([type, regex]) => {
            const matches = text.match(regex) || [];
            contacts[type] = matches.map(m => m.trim()).filter((v, i, a) => a.indexOf(v) === i);
        });

        return contacts;
    };

    const extractSections = (text) => {
        const sections = {};
        const languageKeywords = Object.values(SECTION_KEYWORDS).flatMap(Object.values).flat();

        // Multilingual section extraction
        languageKeywords.forEach(keyword => {
            const sectionRegex = new RegExp(
                `\\b${keyword}\\b[:\\s]*(.+?)(?=\\b(${languageKeywords.join('|')})\\b|$)`,
                'gims'
            );
            
            const matches = [...text.matchAll(sectionRegex)];
            if (matches.length) {
                sections[keyword] = matches.map(match => 
                    match[1].trim().split('\n')
                        .map(line => line.trim())
                        .filter(line => line.length > 0)
                );
            }
        });

        return sections;
    };

    const parsePDFText = async (text) => {
        try {
            const fullName = extractName(text);
            const personalInfo = extractContactInfo(text);
            const sections = extractSections(text);

            return {
                fullName,
                personalInfo,
                sections: Object.fromEntries(
                    Object.entries(sections).map(([key, value]) => [key, value.flat()])
                )
            };
        } catch (error) {
            throw new Error('PDF parsing failed: ' + error.message);
        }
    };

    const handleFileUpload = async (event) => {
        const file = event.target.files[0];
        if (!file) return;

        setIsLoading(true);
        setError(null);

        try {
            const text = await pdfToText(file);
            const parsedData = await parsePDFText(text);
            setCvData(parsedData);
            console.log('Parsed CV Data:', parsedData);
        } catch (error) {
            setError(error.message);
            console.error("PDF Processing Error:", error);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="cv-parser">
            <input 
                type="file" 
                accept=".pdf" 
                onChange={handleFileUpload}
                disabled={isLoading}
            />
            
            {cvData && (
                <div className="cv-details">
                    <h2>CV Analysis</h2>
                    
                    <section className="personal-info">
                        <h3>Personal Information</h3>
                        <p>Name: {cvData.fullName}</p>
                        {cvData.personalInfo.email && (
                            <p>Email: {cvData.personalInfo.email.join(', ')}</p>
                        )}
                        {cvData.personalInfo.phone && (
                            <p>Phone: {cvData.personalInfo.phone.join(', ')}</p>
                        )}
                    </section>

                    {Object.entries(cvData.sections).map(([sectionName, sectionContent]) => (
                        <section key={sectionName}>
                            <h3>{sectionName.toUpperCase()}</h3>
                            <ul>
                                {sectionContent.map((item, index) => (
                                    <li key={index}>{item}</li>
                                ))}
                            </ul>
                        </section>
                    ))}
                </div>
            )}
        </div>
    );
}

export default ReadTXT;


/* From Uiverse.io by Javierrocadev */ 
<div class="relative duration-300  hover:-rotate-0  -rotate-12 group border border-sky-900 border-4  overflow-hidden rounded-2xl relative h-52 w-72 bg-sky-800 p-5 flex flex-col items-start gap-4">
  <div class="text-gray-50">
    <span class="font-bold text-5xl">Jr</span>
    <p class="text-xs">Frontend Developer</p>
  </div>
  <button class="duration-300 hover:bg-sky-900 border hover:text-gray-50 bg-gray-50 font-semibold text-sky-800 px-3 py-2 flex flex-row items-center gap-3">Dowload CV 
    <svg class="w-6 h-6 fill-current" height="100" preserveAspectRatio="xMidYMid meet" viewBox="0 0 100 100" width="100" x="0" xmlns="http://www.w3.org/2000/svg" y="0">
 <path d="M22.1,77.9a4,4,0,0,1,4-4H73.9a4,4,0,0,1,0,8H26.1A4,4,0,0,1,22.1,77.9ZM35.2,47.2a4,4,0,0,1,5.7,0L46,52.3V22.1a4,4,0,1,1,8,0V52.3l5.1-5.1a4,4,0,0,1,5.7,0,4,4,0,0,1,0,5.6l-12,12a3.9,3.9,0,0,1-5.6,0l-12-12A4,4,0,0,1,35.2,47.2Z" fill-rule="evenodd">
 </path>
</svg>
  </button>

  <svg class="group-hover:scale-125 duration-500 absolute -bottom-0.5 -right-20 w-48 h-48 z-10 -my-2  fill-gray-50 stroke-sky-900" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64"><path data-name="layer1" d="M 50.4 51 C 40.5 49.1 40 46 40 44 v -1.2 a 18.9 18.9 0 0 0 5.7 -8.8 h 0.1 c 3 0 3.8 -6.3 3.8 -7.3 s 0.1 -4.7 -3 -4.7 C 53 4 30 0 22.3 6 c -5.4 0 -5.9 8 -3.9 16 c -3.1 0 -3 3.8 -3 4.7 s 0.7 7.3 3.8 7.3 c 1 3.6 2.3 6.9 4.7 9 v 1.2 c 0 2 0.5 5 -9.5 6.8 S 2 62 2 62 h 60 a 14.6 14.6 0 0 0 -11.6 -11 z" stroke-miterlimit="10" stroke-width="5"></path></svg>

  <svg class="group-hover:scale-125 duration-200 absolute -bottom-0.5 -right-20 w-48 h-48 z-10 -my-2  fill-gray-50 stroke-sky-700" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64"><path data-name="layer1" d="M 50.4 51 C 40.5 49.1 40 46 40 44 v -1.2 a 18.9 18.9 0 0 0 5.7 -8.8 h 0.1 c 3 0 3.8 -6.3 3.8 -7.3 s 0.1 -4.7 -3 -4.7 C 53 4 30 0 22.3 6 c -5.4 0 -5.9 8 -3.9 16 c -3.1 0 -3 3.8 -3 4.7 s 0.7 7.3 3.8 7.3 c 1 3.6 2.3 6.9 4.7 9 v 1.2 c 0 2 0.5 5 -9.5 6.8 S 2 62 2 62 h 60 a 14.6 14.6 0 0 0 -11.6 -11 z" stroke-miterlimit="10" stroke-width="2"></path></svg>

  
</div>


import { AppSidebar } from "@/components/app-sidebar"
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb"
import { Separator } from "@/components/ui/separator"
import {
  SidebarInset,
  SidebarProvider,
  SidebarTrigger,
} from "@/components/ui/sidebar"
import ReadTXT from "./ReadTXT"
import Analyse from "./Analyse"
import ReadContextProvider from './ReadContextProvider'
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';

export default function Page() {
  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        <header className="flex h-16 shrink-0 items-center gap-2 transition-[width,height] ease-linear group-has-[[data-collapsible=icon]]/sidebar-wrapper:h-12">
          <div className="flex items-center gap-2 px-4">
            <SidebarTrigger className="-ml-1" />
            <Separator orientation="vertical" className="mr-2 h-4" />
            <Breadcrumb>
              <BreadcrumbList>
                <BreadcrumbItem className="hidden md:block">
                  <BreadcrumbLink href="#">
                    Building Your Application
                  </BreadcrumbLink>
                </BreadcrumbItem>
                <BreadcrumbSeparator className="hidden md:block" />
                <BreadcrumbItem>
                  <BreadcrumbPage>Data Fetching</BreadcrumbPage>
                </BreadcrumbItem>
              </BreadcrumbList>
            </Breadcrumb>
          </div>
        </header>
        <div className="flex flex-1 flex-col gap-4 p-4 pt-0">
           
            <ReadContextProvider>
            <div className="min-h-screen bg-gray-50 dark:bg-gray-900 py-8">
              <div className="container mx-auto px-4">
                <div className="max-w-6xl mx-auto">
                  <h1 className="text-3xl font-bold text-center mb-8 text-gray-800 dark:text-white">
                    Resume Analyzer
                  </h1>
                  
                  <div className="grid lg:grid-cols-[400px,1fr] gap-6">
                    {/* Upload Section */}
                    <Card className="h-fit">
                      <CardHeader>
                        <CardTitle>Upload Resume</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <ReadTXT />
                        <p className="text-sm text-gray-500 mt-4">
                          Upload your resume in PDF format to get detailed analysis and insights
                        </p>
                      </CardContent>
                    </Card>

                    {/* Analysis Section */}
                    <div className="flex-1">
                      <Analyse />
                    </div>
                  </div>
                </div>
              </div>
            </div>
            </ReadContextProvider>
          <div className="min-h-[100vh] flex-1 rounded-xl bg-muted/50 md:min-h-min" />
        </div>
      </SidebarInset>
    </SidebarProvider>
  )
}

      10. give the best prompte for google saerch to get the best results of offers based on user infos
"prompte": {
          "googleSearch" : ""
        }