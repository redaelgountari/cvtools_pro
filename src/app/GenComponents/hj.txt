"use client";
import React, { useContext, useState } from "react";
import pdfToText from "react-pdftotext";
import { ReadContext } from "./ReadContext";
import { FileUpload } from "@/components/ui/file-upload";

function ReadTXT() {
  const [extractedText, setExtractedText] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const { setUserData } = useContext(ReadContext);

  const generateStructuredPrompt = (cvText) => {
    return `You are an advanced AI specialized in CV analysis and structured data extraction. Analyze the given CV text and return the extracted details strictly in JSON format.

    ### ðŸ”¹ **EXTRACTION GUIDELINES**  
    - **Maintain consistency**: Use standard formats for dates, locations, and names.  
    - **Ensure accuracy**: Do not misclassify information (e.g., names as skills).  
    - **No missing fields**: If data is unavailable, use "N/A".  
    - **Structured JSON output**: Keep array structures even for single values.  

    ### ðŸ”¹ **DATA EXTRACTION RULES**  

    **ðŸ“Œ Personal Information**  
    - Extract: Full name, email, phone, location, LinkedIn, personal website, GitHub, and portfolio link.  
    - If multiple names are found, prioritize the one with contact details.  

    **ðŸ“Œ Professional Summary**  
    - Extract a short summary (if available) highlighting key strengths, experience, or career goals.  

    **ðŸ“Œ Experience**  
    - Extract: Job title, company, location, start & end dates, and key responsibilities.  
    - Ensure date format is **YYYY-MM** (or "Present" if ongoing).  

    **ðŸ“Œ Education**  
    - Extract: Degree, institution, location, graduation year, and relevant courses.  

    **ðŸ“Œ Projects**  
    - Extract: Title, description, technologies used, GitHub link, and role played.  

    **ðŸ“Œ Skills & Tools**  
    - **Technical Skills**: Programming languages, frameworks, and libraries.  
    - **Soft Skills**: Communication, teamwork, leadership, etc.  
    - **Languages**: Spoken and written languages.  
    - **Tools**: IDEs, databases, version control, DevOps tools, and design software.  

    **ðŸ“Œ Certifications**  
    - Extract: Certification name, issuer, and year.  

    **ðŸ“Œ Publications**  
    - Extract: Title, type (Research Paper, Blog, Book), year, and link.  

    **ðŸ“Œ Awards & Recognitions**  
    - Extract: Name, year, and brief description of awards, competitions, or honors.  

    **ðŸ“Œ Volunteer Experience**  
    - Extract: Role, organization, start & end dates, and description.  

    **ðŸ“Œ Online Presence**  
    - Extract: Twitter, GitHub, Stack Overflow, Medium, or relevant profiles.  

    **ðŸ“Œ Hobbies & Interests**  
    - Extract personal interests (e.g., sports, music, travel, coding hobbies).  

    ### ðŸ”¹ **EXPECTED JSON OUTPUT FORMAT**  
    \`\`\`json
    {
      "personalInfo": {
        "fullName": "",
        "email": "",
        "phone": "",
        "location": "",
        "linkedin": "",
        "website": "",
        "github": "",
        "portfolio": ""
      },
      "professionalSummary": "",
      "skills": {
         "technical": [],
         "soft": [],
         "languages": []
      },
      "tools": [],
      "experience": [
        {
          "title": "",
          "company": "",
          "location": "",
          "startDate": "",
          "endDate": "",
          "responsibilities": []
        }
      ],
      "education": [
        {
          "degree": "",
          "institution": "",
          "location": "",
          "graduationYear": "",
          "relevantCourses": []
        }
      ],
      "certifications": [
        {
          "name": "",
          "issuer": "",
          "year": ""
        }
      ],
      "publications": [
        {
          "title": "",
          "publicationType": "",
          "year": "",
          "link": ""
        }
      ],
      "awards": [
        {
          "name": "",
          "year": "",
          "description": ""
        }
      ],
      "volunteerExperience": [
        {
          "role": "",
          "organization": "",
          "startDate": "",
          "endDate": "",
          "description": ""
        }
      ],
      "projects": [
        {
          "title": "",
          "description": "",
          "technologiesUsed": [],
          "github": "",
          "role": ""
        }
      ],
      "onlinePresence": {
        "twitter": "",
        "stackOverflow": "",
        "medium": ""
      },
      "hobbies": []
    }
    \`\`\`

    **Return only the structured JSON output.**  

    **CV Text:**  
    ${cvText}
  `;
};

  const handleFileUpload = async (files: File[]) => {
    const file = files[0];
    if (!file) return;

    setIsLoading(true);
    setError(null);

    try {
      const text = await pdfToText(file);
      setExtractedText(text);
      setUserData(generateStructuredPrompt(text));
      console.log("Extracted Text:", text);
    } catch (error) {
      setError(error.message);
      console.error("PDF Processing Error:", error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div>
      <div className="w-full mx-auto border border-dashed bg-white dark:bg-black border-neutral-200 rounded-lg">
        <FileUpload onChange={handleFileUpload} />
      </div>

      {isLoading && <p>Loading...</p>}
    </div>
  );
}

export default ReadTXT;
